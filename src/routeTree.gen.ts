/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as RoutePathsImport } from './app/routes/routePaths'
import { Route as PatientsRouteImport } from './app/routes/patients.route'
import { Route as PatientRouteImport } from './app/routes/patient.route'

// Create/Update Routes

const RoutePathsRoute = RoutePathsImport.update({
  id: '/routePaths',
  path: '/routePaths',
  getParentRoute: () => rootRoute,
} as any)

const PatientsRouteRoute = PatientsRouteImport.update({
  id: '/patients',
  path: '/patients',
  getParentRoute: () => rootRoute,
} as any)

const PatientRouteRoute = PatientRouteImport.update({
  id: '/patient',
  path: '/patient',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/patient': {
      id: '/patient'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientRouteImport
      parentRoute: typeof rootRoute
    }
    '/patients': {
      id: '/patients'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof PatientsRouteImport
      parentRoute: typeof rootRoute
    }
    '/routePaths': {
      id: '/routePaths'
      path: '/routePaths'
      fullPath: '/routePaths'
      preLoaderRoute: typeof RoutePathsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/patient': typeof PatientRouteRoute
  '/patients': typeof PatientsRouteRoute
  '/routePaths': typeof RoutePathsRoute
}

export interface FileRoutesByTo {
  '/patient': typeof PatientRouteRoute
  '/patients': typeof PatientsRouteRoute
  '/routePaths': typeof RoutePathsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/patient': typeof PatientRouteRoute
  '/patients': typeof PatientsRouteRoute
  '/routePaths': typeof RoutePathsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/patient' | '/patients' | '/routePaths'
  fileRoutesByTo: FileRoutesByTo
  to: '/patient' | '/patients' | '/routePaths'
  id: '__root__' | '/patient' | '/patients' | '/routePaths'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PatientRouteRoute: typeof PatientRouteRoute
  PatientsRouteRoute: typeof PatientsRouteRoute
  RoutePathsRoute: typeof RoutePathsRoute
}

const rootRouteChildren: RootRouteChildren = {
  PatientRouteRoute: PatientRouteRoute,
  PatientsRouteRoute: PatientsRouteRoute,
  RoutePathsRoute: RoutePathsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/patient",
        "/patients",
        "/routePaths"
      ]
    },
    "/patient": {
      "filePath": "patient.route.ts"
    },
    "/patients": {
      "filePath": "patients.route.ts"
    },
    "/routePaths": {
      "filePath": "routePaths.ts"
    }
  }
}
ROUTE_MANIFEST_END */
